{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Homepage","text":"<p>This is E. Mittleman's website for the Spring 2025 semester of EGR314.</p>"},{"location":"#assignments","title":"Assignments","text":"Assignment Link Block Diagram link Component Selection link Individual Schematic link Bill of Materials link API link"},{"location":"API/","title":"API","text":""},{"location":"API/#message-types","title":"Message Types","text":"Message Type  byte 1-2 (uint16_t) Description 0 Status Code 1 Drive Mode 2 Sensor Data 3 Path Selection"},{"location":"API/#message-type-0-status-code","title":"Message Type 0: Status Code","text":"Byte 1-2 Byte 3 Var Name msg_type status Var Type uint16_t uint8_t Min Val 0 0 Max Val 3 3 Example 0 2"},{"location":"API/#message-type-2-sensor-rgb-data","title":"Message Type 2: Sensor RGB Data","text":"Byte 1-2 Byte 3 Var Name msg_type color Var Type uint16_t uint8_t Min Val 0 0 Max Val 3 2 Example 2 1"},{"location":"API/#message-type-3-path-selection","title":"Message Type 3 : Path Selection","text":"Byte 1-2 Byte 3 Var Name msg_type path Var Type uint16_t uint8_t Min Val 0 0 Max Val 3 2 Example 2 2"},{"location":"Appendix/","title":"Appendix","text":"<p>Additional information will be placed here if needed</p>"},{"location":"BOM/","title":"Simplified Version of BOM","text":"<p>Note: This is a simplified version of the BOM and only lists information related to the prototype for easy viewing. Please download the complete BOM excel sheet or PDF for information on vendor links, datasheet links, order dates, etc.</p>"},{"location":"BOM/#files","title":"Files","text":"<p>Complete BOM Excel File : link Complete BOM PDF: link Datasheets: link</p>"},{"location":"Block%20Diagram/","title":"Block Diagram","text":""},{"location":"Component%20Selection/","title":"RGB Sensor:","text":"Manufacturer Part Number Image Pros Cons Texas Instruments OPT4060DTSR - Configurable I2C Address  - Small form factor  - Low operating power - Complex configuration  Vishay Semiconductor VEML3328 - Simple configuration  - 4-Channels (RGBC)  - Integrated signal conditioning - Fixed I2C address ams-OSRAM USA INC. AS7341-DLGM - 11-Channel full spectrum analysis  - Configurable flicker detection - Very complex configuration  - Expensive <p>Choice: Texas Instruments OPT4060DTSR The TI OPT4060DTSR will allow for a high degree of accuracy and flexibility at a reasonable price. The sensor provides 4 channels for red, green, blue, and white light as well as an auto ranging feature. Power requirements are low, requiring only 1.6V to 3.3V to function with an operating current of 24 \u03bcA. The small form factor (2.1mm x 1.9mm x 0.6mm), low PPU ($2.88/Unit) and configurable I2C allow for multiple sensors to be implemented with ease if required.  </p>"},{"location":"Component%20Selection/#voltage-regulator","title":"Voltage Regulator","text":"Manufacturer Part Number Image Pros Cons Analog Devices Inc. ADP2302ARDZ-3.3-R7 - Wide operating voltage range  - High current limit - Low efficiency at 5Vin/3.3Vout  - Expensive Texas Instruments LM2674MX-3.3/NOPB - Wide operating voltage range  - High efficiency at 5Vin/3.3Vout - Low current limit  - Moderately expensive STMicroelectronics L6981C33DR - Wide operating voltage range  - Moderate current lmit  - Affordable - High Efficiency - Complex configuration <p>Choice: STMicroelectronics L6981C33DR The STM L6981C33DR provides an efficient and stable 3.3V output with a wide range of voltage inputs. This regulator is highly efficient, up to an estimated 95%. Finally, the 1.5A max output current allows the entire subsystem to operate safely.  </p>"},{"location":"Component%20Selection/#illuminator-led","title":"Illuminator LED","text":"Manufacturer Part Number Image Pros Cons Luminus Devices Inc. SST-20-W35H-B120-J4351 - High CRI  - Low forward voltage  - balanced temperature  - High lumens - High test current  - Expensive  - Low lm/W rating  - Expensive XINGLIGHT XL-3020UWC-A - Low test current  - Compact - High forward voltage  - Low lumens  - No CRI listed  - Unbalanced temperature Cree LED JB2835BWT-G-U40EA0000-N000P001 - Very low forward voltage  - Low test current  - Affordable  -  Balanced temperature  - Very high lm/W rating - Relatively low CRI  <p>Choice: Cree LED JB2835BWT-G-U40EA0000-N000P001 Illumination and color balance are critical for accurate measurements. The Cree J Series 2835 Pro9 white LED is capable of meeting these requirements with minimal power consumption. This model mas a typical forward voltage of 2.67V allowing it to be powered directly by the microcontroller. While the maximum current rating is 480 mA, the LED is capable of producing 28-31 lumens at only 55 mA. Finally, the rated temperature of 4000K and 90 CRI ensures a balanced light output for accurate measurements.  </p>"},{"location":"Component%20Selection/#rg-led","title":"R/G LED","text":"<p>Debugging LEDs are required for ease of use and troubleshooting, both in the development phase and for the end user. These components are not as critical as the power regulator, sensor, or illumination LED, their power concumption must still be taken into consideration. The Lite-On LTST-C150KRKT and LTST-C150KGKT have been selected due to their low power consumption and affordable price. Both models have a forward voltage of 2V and test current of 20 mA, allowing them to be powered directly by the microcontroller.  </p>"},{"location":"Component%20Selection/#microcontroller","title":"Microcontroller","text":"<p>The sensor subsystem is required to analyze and record information about the color of marbles before they are sent to the sorting actuator subsystem. This is done by measuring the amount of red, green, and blue light reflected off the surface of the marble to return 3 8-bit values to compare with an RGB sensor, and a white illuminator LED to ensure accurate measurements. Once these values have been found, they are sent to the actuator, HMI, and internet communication subsystem via UART. This subsystem is to run off of a 3.3V power supply under 1.5A.</p> <p>Microchips PIC18F27Q84 (QFN28) microcontroller is the best fit for the sensor subsystem. The chip is capable of operating at the designated 3.3 volts, and provides users with 1x I2C module as well as 5X UART modules. The sensor subsystem is relatively simple, and is only required to illuminate a ball on a track with a white LED and record R/G/B information in order to determine where the ball is sent. A single I2C module should be enough to control the TI OPT4060, and only one or two pins are required to control the LEDs. Multiple UART modules may be required to communicate with the HMI, sorting actuator, return actuator, and internet communication subsystems developed by the rest of team 201. The image below shows the selected I2C module, 3x UART modules, and 2x LED GPIO pins selected in the pin manager of the MCC Melody workspace.  </p> <p> </p>"},{"location":"Schematic/","title":"RGB Sensor Schematic","text":""},{"location":"Schematic/#power-budget","title":"Power Budget","text":""},{"location":"Schematic/#files","title":"Files","text":"<ul> <li>Cadence OrCAD Schematic: link </li> <li>RGB Sensor Schematic PDF: link</li> <li>Power Budget Spreadsheet: link</li> </ul>"},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"},{"location":"subfolder/","title":"This is the index to a subfolder","text":"<p>Things to discuss</p>"},{"location":"subfolder/another-subfile/","title":"This is a secondary sub page","text":"<p>Things to discuss</p>"}]}