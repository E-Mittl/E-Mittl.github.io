{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Homepage","text":"<p>This is E. Mittleman's website for the Spring 2025 semester of EGR314. This site serves as a living document for the RGB sensor subsystem. The group website (Team 201) can be found here.</p> <p></p>"},{"location":"#assignments","title":"Assignments","text":"Assignment Link Block Diagram link Component Selection link Individual Schematic link Bill of Materials link API link Resources link"},{"location":"API/","title":"API","text":"<p>For a more detailed breakdown of message structure, data types, and sequencing, please view the API page on the Team 201 website.</p>"},{"location":"API/#team-id","title":"Team ID","text":"Member Name Subsystem ID (char) JC R. Human Machine Interface H Eric M. RGB Sensor S Marcus P. MQTT Server M Bradley P. Actuator A Broadcast ALL X"},{"location":"API/#message-types","title":"Message Types","text":"Message Type  byte 1-2 (uint8_t) Description 0x00 Status Code 0x01 Drive Mode 0x02 Sensor Data 0x03 Path Selection"},{"location":"API/#message-type-0-status-code","title":"Message Type 0: Status Code","text":"Byte 1 Byte 2 Var Name msg_type initialize Var Type uint8_t uint8_t Min Val 0x00 0x00 Max Val 0x00 0x00 Example 0x00 0x00"},{"location":"API/#message-type-2-sensor-rgb-data","title":"Message Type 2: Sensor RGB Data","text":"Byte 1 Byte 2 Var Name msg_type color Var Type uint8_t uint8_t Min Val 0x00 0x00 Max Val 0x03 0x02 Example 0x02 0x01"},{"location":"API/#message-type-3-path-selection","title":"Message Type 3 : Path Selection","text":"Byte 1 Byte 2 Var Name msg_type path Var Type uint8_t uint8_t Min Val 0x00 0x00 Max Val 0x03 0x02 Example 0x02 0x02"},{"location":"BOM/","title":"Simplified Version of BOM","text":"<p>Note: This is a simplified version of the BOM and only lists information related to the prototype for easy viewing. Please download the complete BOM excel sheet or PDF for information on vendor links, datasheet links, order dates, etc.</p>"},{"location":"BOM/#files","title":"Files","text":"<p>Complete BOM Excel File : link Complete BOM PDF: link</p>"},{"location":"Block%20Diagram/","title":"Block Diagram","text":""},{"location":"Block%20Diagram/#design-choices","title":"Design Choices","text":"<p>The sensor subsystem is designed to be as simple as possible for easy, accurate, and efficient operation. The block diagram above helped to ensure the dsign meets these requirements, as well as project requirements. It shows how the PIC communicates with other subsystems over UART, as well as how it uses I2C to communicate with the Microchip SNAP programmer and OPT4048 RGB sensor. Pin allocation ensures there is enough I/O for the red and green debugging LEDs, white illumination LED, and debugging pushbutton.</p>"},{"location":"Component%20Selection/","title":"Component Selection","text":""},{"location":"Component%20Selection/#rgb-sensor","title":"RGB Sensor:","text":"Manufacturer Part Number Image Pros Cons Texas Instruments OPT4060DTSR - Configurable I2C Address  - Small form factor  - Low operating power - Complex configuration  Vishay Semiconductor VEML3328 - Simple configuration  - 4-Channels (RGBC)  - Integrated signal conditioning - Fixed I2C address ams-OSRAM USA INC. AS7341-DLGM - 11-Channel full spectrum analysis  - Configurable flicker detection - Very complex configuration  - Expensive Texas Instruments OPT4048DTSR - Configurable I2C Address  - Small form factor  - Low operating power  - High operating speed - Complex configuration  - Sensitive to environmental changes <p>Choice: Texas Instruments OPT4048DTSR The TI OPT4048DTSR is the next generation of the OPT4060DTSR, and will allow for a high degree of accuracy and flexibility at a reasonable price. The sensor provides 4 channels for red, green, blue, and white light as well as an auto ranging feature. Power requirements are low, requiring only 1.6V to 3.3V to function with an operating current of 24 \u03bcA. The small form factor (2.1mm x 1.9mm x 0.6mm), low PPU ($2.88/Unit) and configurable I2C allow for multiple sensors to be implemented with ease if required.  </p>"},{"location":"Component%20Selection/#voltage-regulator","title":"Voltage Regulator","text":"Manufacturer Part Number Image Pros Cons Analog Devices Inc. ADP2302ARDZ-3.3-R7 - Wide operating voltage range  - High current limit - Low efficiency at 5Vin/3.3Vout  - Expensive Texas Instruments LM2674MX-3.3/NOPB - Wide operating voltage range  - High efficiency at 5Vin/3.3Vout - Low current limit  - Moderately expensive STMicroelectronics L6981C33DR - Wide operating voltage range  - Moderate current lmit  - Affordable - High Efficiency - Complex configuration <p>Choice: STMicroelectronics L6981C33DR The STM L6981C33DR provides an efficient and stable 3.3V output with a wide range of voltage inputs. This regulator is highly efficient, up to an estimated 95%. Finally, the 1.5A max output current allows the entire subsystem to operate safely.  </p>"},{"location":"Component%20Selection/#illuminator-led","title":"Illuminator LED","text":"Manufacturer Part Number Image Pros Cons Luminus Devices Inc. SST-20-W35H-B120-J4351 - High CRI  - Low forward voltage  - balanced temperature  - High lumens - High test current  - Expensive  - Low lm/W rating  - Expensive XINGLIGHT XL-3020UWC-A - Low test current  - Compact - High forward voltage  - Low lumens  - No CRI listed  - Unbalanced temperature Cree LED JB2835BWT-G-U40EA0000-N000P001 - Very low forward voltage  - Low test current  - Affordable  -  Balanced temperature  - Very high lm/W rating - Relatively low CRI  Samsung Semiconductor, Inc. SPMWHT541MP5WAR0S5 - Affordable  - Very high lm/W rating  - Exposed leads  - Low profile - Relatively low CRI  - High forward voltage <p>Choice: Samsung Semiconductor SPMWHT541MP5WAR0S5 Illumination and consistency are critical for accurate measurements. The Samsung SPMWHT541MP5WAR0S5 is capable of meeting these requirements with minimal power consumption. While the maximum current rating is 180 mA, the LED is capable of producing 35-37 lumens at only 65 mA. The rated temperature of 5000K and 80 CRI ensures a balanced light output for accurate measurements.  </p>"},{"location":"Component%20Selection/#rg-led","title":"R/G LED","text":"<p>Debugging LEDs are required for ease of use and troubleshooting, both in the development phase and for the end user. These components are not as critical as the power regulator, sensor, or illumination LED, their power concumption must still be taken into consideration. The Lite-On LTST-C150KRKT and LTST-C150KGKT have been selected due to their low power consumption and affordable price. Both models have a forward voltage of 2V and test current of 20 mA, allowing them to be powered directly by the microcontroller.  </p>"},{"location":"Component%20Selection/#selected-components","title":"Selected Components","text":"Component Image Microchip PIC18F27Q84 TI OPT4048DTSR STMicroelectronics L6981C33DR Samsung Semiconductor SPMWHT541MP5WAR0S5"},{"location":"Component%20Selection/#microcontroller","title":"Microcontroller","text":"<p>The sensor subsystem is required to analyze and record information about the color of marbles before they are sent to the sorting actuator subsystem. This is done by measuring the amount of red, green, and blue light reflected off the surface of the marble to return 3 8-bit values to compare with an RGB sensor, and a white illuminator LED to ensure accurate measurements. Once these values have been found, they are sent to the actuator, HMI, and internet communication subsystem via UART. This subsystem is to run off of a 3.3V power supply under 1.5A.</p> <p>Microchips PIC18F27Q84 (SOIC28) microcontroller is the best fit for the sensor subsystem. The chip is capable of operating at the designated 3.3 volts, and provides users with 1x I2C module as well as 5X UART modules. The sensor subsystem is relatively simple, and is only required to illuminate a ball on a track with a white LED and record R/G/B information in order to determine where the ball is sent. A single I2C module should be enough to control the TI OPT4060, and only one or two pins are required to control the LEDs. Multiple UART modules may be required to communicate with the HMI, sorting actuator, return actuator, and internet communication subsystems developed by the rest of team 201. The image below shows the selected I2C module, 3x UART modules, and 2x LED GPIO pins selected in the pin manager of the MCC Melody workspace.  </p> <p> </p>"},{"location":"Component%20Selection/#design-process","title":"Design Process","text":"<p>The sensor subsystem is designed for quick, accurate, low power operation. The L6981C33DR regulator is capable of efficiently converting the teams 12V power input to a safe 3.3V operating output. Quick operation is determined by the PIC18F27Q84 microcontroller which easily handles UART communication and message handling between sensors as well as I2C communication with the OPT4048 RGB sensor. Both Lite-On LEDs used for debugging display quick sensor results in the final product, allowing the team to determine if an orange, blue, or green ball had been detected without the use of external tools for exact values.</p>"},{"location":"Component%20Selection/#power-budget","title":"Power Budget","text":"<p> Power Budget Spreadsheet: link</p> <p>The power budget is critical in ensuring component compatibility and safe operation. The sensor is designed to function with a current draw below 500 mA, including a 25% safety margin. It was quicly determined that the microcontroller and sensor would draw aproximately 360 mA at peak operation. While this falls within the initially established maximum limit, the total power consumption including the safety margin would result in 450 mA current draw, resulting in only 50 mA being available in case of emergency. This led to the selection of the L6981C33DR to ensure there would be no power issues during testing. </p>"},{"location":"Resources/","title":"Resources","text":"<p>The code and MPLabX resources for this project can be found as a .zip file here.</p>"},{"location":"Resources/#code","title":"Code","text":"<pre><code>#include \"mcc_generated_files/system/system.h\"\n#include &lt;math.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;stdio.h&gt;\n\n#define BUFSIZE 16\n#define MSGSIZE 64\n#define TEAMSIZE 5\n#define TYPESIZE 4\n#define MSGTESTSIZE 64\n#define MSGTESTCHAR 0\n\n#define OPT4048_ADDR 0x45 //0b1000101\n\n//Control register for startup\n#define CTRL_REG 0x0A // CONFIG REGISTER\n#define RANGE 0x0C // AUTO SCALE\n#define CONV_TIME 0x07 //50 MS CONVERSION TIME\n#define OP_MODE_CONT 0x03 // CONTINUOUS MODE\n#define LATCH_MODE 0x00 // TRANSPARENT HYSTERESIS MODE\n#define INT_POL 0x00 // INT PIN ACTIVE LOW\n#define FAULT_COUNT 0x02 \n\nconst char id = 'S';\nconst char team_id[TEAMSIZE + 1] = \"MASHX\";\nconst uint8_t message_types[TYPESIZE] = {0x00, 0x01,0x02,0x03};\nconst uint8_t status[TYPESIZE] = {0x00,0x01,0x02,0x03};\nconst uint8_t drive[TYPESIZE] = {0x00,0x01};\nconst uint8_t sens[TYPESIZE] = {0x00,0x01,0x02,0x03};\nconst uint8_t dir[TYPESIZE] = {0x00,0x01,0x02,0x03};\nchar buffer_in[BUFSIZE + 1];\nchar message_in[MSGSIZE + 1];\nchar message_out[MSGSIZE+1];\n\nuint8_t val;\n\nfloat timeCurrent = 0.0;\nfloat timeLast = 0.0;\nfloat timeHeldStart = 0.0;\nint secHeld = 0;\nint time_ms = 0;\nint time_s = 0;\nint i = 0;\n\nfloat timeDown = 0.0;\nfloat timeUp = 0.0;\n\nint SWCurrent;\nint SWLast;\nint lastSecondBlink;\nfloat debounceDelay = 0.150;\n\n// FOR BLINKING FUNCTION\nunsigned int blinkCount = 0;\nunsigned int blinkTarget = 0;\nunsigned long lastBlinkTime = 0;\nbool ledState = false;\nbool blinking = false;\n\nvoid fill_string(char * mystring, char value, unsigned int size){\n    for(int ii=0;ii&lt;size;ii++){\n        mystring[ii]=value;\n    }\n}\n\n\nunsigned int find_char(const char * mystring, char value, unsigned int size){\n    char c = 0;\n    for(int ii = 0; ii&lt;size; ii++){\n        c = mystring[ii];\n        //printf(\"%c,%c; \",value, mystring[ii]);\n        if(c==value){\n            return 1;\n        }\n    }\n    return 0;\n}\n\nvoid test_message(char type, char val){\n    if(message_in[4] == type &amp;&amp; message_in[5] == val){\n        for(i = 0; i &lt; type; i++){\n            GLED_SetHigh();\n            __delay_ms(200);\n            GLED_SetLow();\n            __delay_ms(200);\n        }\n        for(i = 0; i &lt; val; i++){\n            RLED_SetHigh();\n            __delay_ms(200);\n            RLED_SetLow();\n            __delay_ms(200);\n        }\n    }\n}\nvoid sens_setup(void){\n    uint8_t controlData[3];\n    uint16_t controlWord = 0;\n\n    controlWord |= (RANGE &lt;&lt; 10);        // Bits 13:10\n    controlWord |= (CONV_TIME &lt;&lt; 6);     // Bits 9:6\n    controlWord |= (OP_MODE_CONT &lt;&lt; 4);  // Bits 5:4\n    controlWord |= (LATCH_MODE &lt;&lt; 3);    // Bit 3\n    controlWord |= (INT_POL &lt;&lt; 2);       // Bit 2\n    controlWord |= (FAULT_COUNT);        // Bits 1:0\n\n    controlData[0] = CTRL_REG;               // 0x0A\n    controlData[1] = (controlWord &gt;&gt; 8) &amp; 0xFF; // MSB\n    controlData[2] = (controlWord &amp; 0xFF);      // LSB\n    WLED_SetHigh();\n    __delay_ms(300);\n    I2C1_Write(OPT4048_ADDR, controlData, 3);\n    __delay_ms(300);\n    WLED_SetLow();\n}\nuint32_t sensorRead(char c) {\n    uint8_t reg = 0x00;\n    uint8_t msb = 0, lsb = 0;\n    uint8_t exp = 0;\n    uint16_t mantissa = 0;\n    uint32_t finalADC = 0;\n\n    // Choose channel\n    if (c == 'r') reg = 0x00;  // CH0 - Clear\n    else if (c == 'g') reg = 0x02; // CH1 - Red\n    else if (c == 'b') reg = 0x04; // CH2 - Green\n    else if (c == 'w') reg = 0x06; // CH3 - Blue\n    else return 0; // Invalid channel\n\n    // Read MSB (reg), then LSB (reg + 1)\n    I2C1_WriteRead(OPT4048_ADDR, &amp;reg, 1, &amp;msb, 1);\n    __delay_ms(65);\n    reg += 1;\n    I2C1_WriteRead(OPT4048_ADDR, &amp;reg, 1, &amp;lsb, 1);\n    __delay_ms(65);\n\n    // Extract exponent and mantissa\n    exp = (msb &gt;&gt; 4) &amp; 0x0F;\n    mantissa = ((msb &amp; 0x0F) &lt;&lt; 8) | lsb; // 12-bit mantissa\n\n    // Scale using exponent\n    finalADC = ((uint32_t)mantissa) &lt;&lt; exp;\n\n    return finalADC;\n}\nvoid sens_init(){\n    printf(\"AZAH%c%cYB\",0x00,0x00);\n    for(i = 0; i &lt;= 5;i++){\n        RLED_SetHigh();\n        __delay_ms(200);\n        RLED_SetLow();\n        __delay_ms(200);\n    }\n    WLED_SetHigh();\n    __delay_ms(10);\n    uint32_t RVal = (sensorRead('r')*255)/120000;\n    __delay_ms(10);\n    uint32_t GVal = (sensorRead('g')*255)/220000;\n\n    float R2G = ((float)RVal / (float)GVal) * 100.0;\n    if( R2G &gt; 100.0){\n        printf(\"AZSX%c%cYB\",0x02,0x00);\n    }\n    else if(R2G &lt; 100.0 &amp;&amp; R2G &gt;= 85.0){\n        printf(\"AZSX%c%cYB\",0x02,0x01);\n    }\n    else if(R2G &lt; 85.0){\n        printf(\"AZSX%c%cYB\",0x02,0x02);\n    }\n    WLED_SetLow();\n}\n\nvoid eusart_callback(void){\n    //ms++;\n}\n\n// Nonblocking code to keep track of time\nvoid timer_callback(){\n        time_ms = time_ms + 1;\n        if(time_ms &gt;= 1000){\n            time_ms = time_ms - 1000;\n            time_s = time_s + 1;\n    }\n}\nvoid pin_down(){  \n}\nvoid getColor(){\n    WLED_SetHigh();\n    __delay_ms(300);\n    uint32_t RVal = (sensorRead('r')*255)/120000;\n    __delay_ms(75);\n    uint32_t GVal = (sensorRead('g')*255)/220000;\n    __delay_ms(750);\n    float R2G = ((float)RVal / (float)GVal) * 100.0;\n    if( R2G &gt; 120.0){\n        RLED_SetHigh();\n        __delay_ms(1000);\n        RLED_SetLow();\n        printf(\"AZSH%c%cYB\",0x02,0x00);\n    }\n    else if(R2G &lt; 120.0 &amp;&amp; R2G &gt;= 85.0){\n        RLED_SetHigh();\n        GLED_SetHigh();\n        __delay_ms(1000);\n        RLED_SetLow();\n        GLED_SetLow();\n        printf(\"AZSH%c%cYB\",0x02,0x01);\n    }\n    else if(R2G &lt; 55.0){\n        GLED_SetHigh();\n        __delay_ms(1000);\n        GLED_SetLow();\n        printf(\"AZSH%c%cYB\",0x02,0x02);\n    }\n    WLED_SetLow();\n}\nvoid handleMessage(){\n    char sender = message_in[2];\n    char receiver = message_in[3];\n    char type = message_in[4];\n    char data = message_in[5];\n\n    if(find_char(team_id,sender,TEAMSIZE) == 0 || sender == 'S'){\n        return;\n    }\n    if(find_char(team_id,receiver,TEAMSIZE) == 1){\n        if(receiver == 'S'){\n            if(find_char(message_types,type,TYPESIZE) == 1){\n                if(type == 0x00){\n                    if(data == 0x00){\n                        printf(\"AZSH%c%cYB\",0x00,0x00);\n                        RLED_SetLow();\n                        for(int i = 0; i &lt; 5; i++){\n                            GLED_SetHigh();\n                            __delay_ms(250);\n                            GLED_SetLow();\n                            __delay_ms(250);\n                        }\n                        getColor();\n                        }\n                        else{\n                            return;\n                        }\n                }\n                if(type == 0x03){\n                    getColor();\n                }\n            }\n        }\n        if(receiver == 'X'){\n            if(find_char(message_types,type,TYPESIZE) == 1){\n                printf(\"AZ%c%c%c%cYB\",sender,receiver,type,data);\n                if(type == 0x00){\n                    if(data == 0x00){\n                        printf(\"AZSH%c%cYB\",0x00,0x00);\n                        RLED_SetLow();\n                        for(int i = 0; i &lt; 5; i++){\n                            GLED_SetHigh();\n                            __delay_ms(250);\n                            GLED_SetLow();\n                            __delay_ms(250);\n                        }\n                        getColor();\n                        return;\n                        }\n                        else{\n                            return;\n                        }\n                }\n                if(type == 0x03){\n                    getColor();\n                }\n            }\n        }\n        else if(receiver == 'A' || receiver == 'M' || receiver == 'H'){\n            printf(\"AZ%c%c%c%cYB\",sender,receiver,type,data);\n            return;\n        }\n        else{\n            return;\n        }\n\n    }\n\n\n}\nvoid buttonCheck(){\n\n        timeCurrent = time_s + time_ms/1000.0; // Calculate current time\n\n        SWCurrent = SW_GetValue();\n\n        if(SWCurrent != SWLast){\n            if(fabs(timeCurrent - timeLast) &gt; debounceDelay){\n                GLED_SetHigh();\n                printf(\"AZSX%c%cYB\",0x01, 0x00);\n            }\n\n      }\n        SWLast = SWCurrent;\n        timeLast = time_s + time_ms/1000.0;       \n}\n\n\n\nint main(void)\n{\n    SYSTEM_Initialize();\n    INTERRUPT_GlobalInterruptEnable();    \n\n\n    UART1_Initialize();\n    UART1_Enable();\n\n    char c=0;\n    char sender;\n    char receiver;\n    char type;\n    char subtype;\n    unsigned int pass = 0;\n    unsigned int buffer_ii = 0;\n    unsigned int buffer_last_ii = 0;\n    unsigned int message_ii = 0;\n    unsigned int message_last_ii = 0;\n    buffer_in[BUFSIZE] = 0;\n    message_in[MSGSIZE] = 0;\n    unsigned int message_incoming = 0;\n    fill_string(buffer_in, 'a', BUFSIZE);\n    fill_string(message_in,'_',MSGSIZE);\n    message_in[MSGTESTSIZE] = MSGTESTCHAR;\n    sens_setup();\n    //buttonWait();\n    RLED_SetHigh();\n    UART1_RxCompleteCallbackRegister(eusart_callback);\n    SW_SetInterruptHandler(pin_down);\n    TMR0_PeriodMatchCallbackRegister(timer_callback);\n    TMR0_Start();\n    while(1){\n        if(UART1_IsRxReady())\n            {\n\n                c = UART1_Read();\n                buffer_in[buffer_ii]=c;\n\n                // If AZ is detected - start recording\n                if (buffer_in[buffer_last_ii]=='A' &amp;&amp; buffer_in[buffer_ii]=='Z'){\n                    fill_string(message_in,'_',MSGSIZE);\n                    message_in[MSGTESTSIZE]=MSGTESTCHAR;\n                    message_incoming=1;\n                    message_in[0] = buffer_in[buffer_last_ii]; // Set A to position 0 in message array\n                    message_ii=1;\n                    //RLED_SetHigh();\n                    //GLED_SetLow();\n                }\n\n                // If YB is detected - end recording\n                if (buffer_in[buffer_last_ii]=='Y' &amp;&amp; buffer_in[buffer_ii]=='B'){\n                    message_incoming=0;\n                    message_in[message_ii] = buffer_in[buffer_ii];\n                    message_in[message_ii + 1] = '\\0'; \n                    message_last_ii= message_ii;\n                    message_ii = message_ii+1;\n                    handleMessage();\n                    //GLED_SetHigh();\n                    //RLED_SetLow();\n                }\n                if (message_incoming != 0){\n                    message_in[message_ii] = buffer_in[buffer_ii];\n\n                    // Determine if message is too long\n                    message_last_ii= message_ii;\n                    message_ii = message_ii+1;\n                    if (message_ii&lt;MSGTESTSIZE){} else{\n                        message_incoming=0;\n                        message_ii=0;\n                    }\n                }\n                buffer_last_ii= buffer_ii;\n                buffer_ii = (buffer_ii+1)%BUFSIZE;\n\n            }\n        buttonCheck();\n        }\n}\n</code></pre>"},{"location":"Schematic/","title":"RGB Sensor Schematic","text":""},{"location":"Schematic/#files","title":"Files","text":"<ul> <li>Cadence OrCAD Schematic and PCB: link </li> <li>RGB Sensor Schematic PDF: link</li> <li>Gerber Files: link</li> </ul>"},{"location":"Schematic/#pcb","title":"PCB","text":"<p>Top View </p> <p>Bottom View </p>"},{"location":"Schematic/#user-needs-and-decisions","title":"User Needs and Decisions","text":"<p>The schematic and PCB design demonstrate how user needs and project requirements are met. Each function of the sensor is given it's own spot on the board for organiation and ease of operation. The power regulation system is located at the top of the board, and is connected to wall power or team power through one of two selectable headers - one for wall power via barrel jack, and one for team power via ribon cable connected to pin 1 of each 2x4 header. The red and green LEDs are placed on the bottom of the PCB with the debugging pushbutton for easy viewing and opearation. Two 2x4 header pins allow for power to be transfered to each team system (Vin on pin 1, GND on pin 8), and UART communication is passed through pin 3 of these headers - later corrected to pin 2 through jumpers. Additional I/O is provided for users utilizing pins A0:A5 of the microcontroller. Three I/O pins are connected to male headers, and 3 are connected to female headers. MOSFETS are used to isolate the 3.3V power from the microcontroller while operating LEDs, as well as reducing power required to control them Finally, the white illumination LED and OPT4048 sensor are placed on the back of the board allowing them to face the inside of an enclosure for accurate measurement while the user interface remains available outside.</p>"},{"location":"Schematic/#version-20","title":"Version 2.0","text":"<p>If I were able to create a second version of the sensor, I would focus on improving the ribbon cable headers, pysical mounting options, and fixed connections. Due to a misunderstanding in ribbon cable standards, header positioning standards, and physical dimensions, the 2x4 headers used to communicate with and provide power to each board caused multiple problems. To start, the ribbon cable pins are mirrored from the header pins - the top and bottom rows are swapped As a result, the headers needed to be mounted upside down with the pins  on the back of the board, rather than both on front as I originally intended. Dimensioning issues were also a problem as the housing on the headers overlapped and needed to be modified to fit properly. Finally, I misunderstood how header pins were oriented, and placed a trace from the microcontroller to pin 3 of the headers, thinking that the pins were numbered length-wise with two rows of four pins, rather than as four rows of two pins. All of these are fixable and would only require a small increase in the size of the board and minimal trace routing fixes. The board also features no way to mount with screws or clips, and parts sat closer to the edge of the board than I expected resulting in a clunky mounting system in the final project. A second version should include holes for mounting, or at least clear corners to attach to. Finally, I made a critical mistake in the schematic design, and connected pins 2:3 of the voltage regulator by accident. This resulted in incorrect operation and the small size of the traces, components, and pins made fixing the errors difficult.</p> <p>Additional but non-critical fixes could be focused on the UART and I2C traces. While there were no communication issues, the I2C lines run in a straight line parallel to each other for a significant distance, and some crosstalk was present in the signal. These traces were only placed 5 mils apart, and could stand to be placed 15 mils apart instead. UART lines, on the other hand, could be placed closer together in a more uniform manner, though the signals did not appear to have any distortion or noise during operation. </p>"},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"},{"location":"subfolder/","title":"This is the index to a subfolder","text":"<p>Things to discuss</p>"},{"location":"subfolder/another-subfile/","title":"This is a secondary sub page","text":"<p>Things to discuss</p>"}]}